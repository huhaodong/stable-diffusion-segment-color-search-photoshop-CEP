{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/session-src/index.js","webpack:///./src/session-src/src/Session.js","webpack:///external \"events\"","webpack:///./src/session-src/src/ScriptLoader.js","webpack:///./src/session-src/src/managers/DataManagers.js","webpack:///./src/session-src/src/managers/LogManager.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","session","Session","_classCallCheck","this","_managers","DataManagers","init","log","scriptLoader","loadJSX","test","_this","evalScript","then","res","options","folderPath","isInfoChecked","isFlattenChecked","isInspectVisibleChecked","isMasksChecked","isTexturesChecked","isMeaningfulNamesChecked","pluginData","destinationFolder","exportInfoJson","inspectOnlyVisibleLayers","exportMasks","exportTextures","flatten","isHierarchicalChecked","namePrefix","undefined","Promise","resolve","reject","JSON","parse","catch","err","val","console","require","ScriptLoader","EvalScript_ErrMessage","cs","CSInterface","fileName","extensionRoot","getSystemPath","SystemPath","EXTENSION","functionName","params","eval_string","stringify","that","eval_res","toLowerCase","indexOf","createScriptError","reason","data","_cs","_manager_log","LogManager","_logs","apply","concat","Array","slice","arguments","addRawLog","push"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @author Tomer Riko Shalev\n */\n\nimport session from './src/Session.js'\n\nwindow.session = session\n","/**\n * @author Tomer Riko Shalev\n */\n\nimport EventEmitter from 'events'\nimport scriptLoader from './ScriptLoader'\nimport DataManagers from './managers/DataManagers.js'\n/**\n * the main plugin session. This can enter the node modules as\n * well as the host\n *\n */\nclass Session {\n\n    _managers = new DataManagers()\n\n    constructor() {\n        //super()\n\n        this.init()\n    }\n\n    /**\n     * init - session\n     *\n     */\n    init() {\n        // init before everything so I can intercept console.log\n        this._managers.init()\n        this.log('session is initing...')\n        // load jsx file dynamically\n        this.log('loading the main jsx file')\n        scriptLoader.loadJSX('main.jsx')\n\n        // some testing\n        this.test()\n        // var fs = require('fs-extra')\n        //console.log(fs)\n\n        this.log('session is inited')\n    }\n\n\n    /**\n     * get data managers\n     *\n     * @return {type}  description\n     */\n    get managers() {\n        return this._managers\n    }\n\n    /**\n     * scriptLoader - get the script loader\n     *\n     */\n    scriptLoader() {\n        return scriptLoader\n    }\n\n    /**\n     * test - let's test things\n     *\n     */\n    test() {\n        var obj = {\n            name: 'tomer'\n        }\n\n        scriptLoader.evalScript('test_host', obj).then((res) => {\n            this.log('result is ' + res)\n        })\n    }\n\n    /**\n     * invoke the plugin\n     *\n     * @param  {{textures:boolean, masks:boolean, info: boolean, flatten:boolean}} options for plugin\n     *\n     * @return {object} describes how well the execution of plugin was\n     */\n    invokePlugin(options) {\n        const { folderPath, isFlattenChecked,\n                isInfoChecked, isInspectVisibleChecked,\n                isMasksChecked, isTexturesChecked,\n                isMeaningfulNamesChecked, isHierarchicalChecked} = options\n\n        // i reparse everything to detect failures\n        const pluginData = {\n            destinationFolder: folderPath,\n            exportInfoJson: isInfoChecked,\n            inspectOnlyVisibleLayers: isInspectVisibleChecked,\n            exportMasks: isMasksChecked,\n            exportTextures: isTexturesChecked,\n            flatten: !isHierarchicalChecked,\n            namePrefix: isMeaningfulNamesChecked ? 'layer' : undefined\n        }\n\n        var that = this\n\n        return new Promise((resolve, reject) => {\n\n            scriptLoader.evalScript('invoke_document_worker', pluginData)\n                        .then((res) => {\n                            resolve(JSON.parse(res))\n                        })\n                        .catch(err => {\n                            reject(err)\n                        })\n\n        })\n\n    }\n\n    /**\n     * log some info with session prefix\n     *\n     * @param  {string} val what to log\n     */\n    log(val) {\n        console.log(`${this.name} ${val}`)\n    }\n\n    get name() {\n        return 'Session:: '\n    }\n\n}\n\nvar session = new Session()\n\nexport default session\n","module.exports = require(\"events\");","/**\n * @author Tomer Riko Shalev\n */\n\n/**\n * load jsx scripts dynamically\n */\nclass ScriptLoader {\n    EvalScript_ErrMessage = \"EvalScript error.\"\n\n    constructor() {\n        this.cs = new CSInterface()\n    }\n\n    get cs() {\n        return this._cs\n    }\n\n    set cs(val) {\n        this._cs = val\n    }\n\n    /**\n     * loadJSX - load a jsx file dynamically, this\n     * will also load all of it's includes which is desirable\n     *\n     * @param  {type} fileName the file name\n     * @return {type}          description\n     */\n    loadJSX(fileName) {\n        var cs = this.cs\n        var extensionRoot = cs.getSystemPath(SystemPath.EXTENSION) + \"/host/\";\n\n        cs.evalScript('$.evalFile(\"' + extensionRoot + fileName + '\")');\n    }\n\n    /**\n     * evalScript - evaluate a JSX script\n     *\n     * @param  {type} functionName the string name of the function to invoke\n     * @param  {type} params the params object\n     * @return {Promise} a promise\n     */\n    evalScript(functionName, params) {\n        var params_string = params ? JSON.stringify(params) : ''\n        var eval_string = `${functionName}('${params_string}')`\n        var that = this\n\n        return new Promise((resolve, reject) => {\n\n            var callback = function(eval_res) {\n                // console.log('weird' + eval_res)\n                if(typeof eval_res === 'string') {\n                    // console.log(eval_res)\n                    if(eval_res.toLowerCase().indexOf('error') != -1) {\n                        that.log('err eval')\n                        reject(that.createScriptError(eval_res))\n\n                        return\n                    }\n                }\n\n                that.log('success eval')\n\n                resolve(eval_res)\n\n                return\n            }\n\n            that.cs.evalScript(eval_string, callback)\n        })\n\n    }\n\n    createScriptError(reason, data) {\n        return {reason, data}\n    }\n\n    /**\n     * log some info with session prefix\n     *\n     * @param  {string} val what to log\n     */\n    log(val) {\n        console.log(`${this.name} ${val}`)\n    }\n\n    get name() {\n        return 'ScriptLoader:: '\n    }\n\n}\n\nvar scriptLoader = new ScriptLoader()\n\nexport default scriptLoader\n","/**\n * @author Tomer Riko Shalev\n */\n\nimport LogManager from './LogManager.js'\n\nexport default class DataManagers {\n    _manager_log = undefined\n\n    constructor() {\n\n    }\n\n    init() {\n        this._manager_log = new LogManager()\n\n        this._manager_log.init()\n    }\n\n    /**\n     * get log - the log manager\n     *\n     * @return {LogManager} the log manager\n     */\n    get log() {\n        return this._manager_log\n    }\n\n}\n","/**\n * @author Tomer Riko Shalev\n */\n\n\n/**\n * log management\n *\n */\nexport default class LogManager {\n    _logs = []\n\n    constructor() {\n\n    }\n\n    init() {\n        this.log('initing...')\n\n        var log = console.log\n\n        if(console === undefined)\n            return\n        var that = this\n        // override the console.log method\n        console.log = function () {\n            // log.call(this, 'My Console!!!')\n            // log.apply(this, Array.prototype.slice.call(arguments))\n            // retain older console.log functionality\n            log.call(this, ...arguments)\n            // save the log internally\n            that.addRawLog(...arguments)\n        }\n\n    }\n\n    /**\n     * addLog - collect log\n     *\n     * @param  {Object} val anything\n     *\n     */\n    addRawLog(val) {\n        this._logs.push(val)\n    }\n\n    get rawLogs() {\n        return this._logs\n    }\n\n    get name() {\n        return 'LogManager:: '\n    }\n\n    log(val) {\n        return `${this.name} ${val}`\n    }\n}\n"],"sourceRoot":""}